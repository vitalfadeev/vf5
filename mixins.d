// expansion at /usr/include/dmd/druntime/import/core/internal/atomic.d(502,13)

                asm pure nothrow @nogc @trusted
                {
                    mov DL, value;
                    mov AL, compare;

                    mov RCX, dest;
                    lock; cmpxchg [RCX], DL;

                    setz success;
                }


// expansion at /usr/include/dmd/druntime/import/core/internal/atomic.d(502,13)

                asm pure nothrow @nogc @trusted
                {
                    mov DX, value;
                    mov AX, compare;

                    mov RCX, dest;
                    lock; cmpxchg [RCX], DX;

                    setz success;
                }


// expansion at /usr/include/dmd/druntime/import/core/internal/atomic.d(502,13)

                asm pure nothrow @nogc @trusted
                {
                    mov RDX, value;
                    mov RAX, compare;

                    mov RCX, dest;
                    lock; cmpxchg [RCX], RDX;

                    setz success;
                }


// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlassert.d(19,1)
alias SDL_ASSERTION_RETRY = SDL_assert_state.SDL_ASSERTION_RETRY;alias SDL_ASSERTION_BREAK = SDL_assert_state.SDL_ASSERTION_BREAK;alias SDL_ASSERTION_ABORT = SDL_assert_state.SDL_ASSERTION_ABORT;alias SDL_ASSERTION_IGNORE = SDL_assert_state.SDL_ASSERTION_IGNORE;alias SDL_ASSERTION_ALWAYS_IGNORE = SDL_assert_state.SDL_ASSERTION_ALWAYS_IGNORE;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlstdinc.d(16,1)
alias SDL_FALSE = SDL_bool.SDL_FALSE;alias SDL_TRUE = SDL_bool.SDL_TRUE;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlaudio.d(35,1)
alias AUDIO_U8 = SDL_AudioFormat.AUDIO_U8;alias AUDIO_S8 = SDL_AudioFormat.AUDIO_S8;alias AUDIO_U16LSB = SDL_AudioFormat.AUDIO_U16LSB;alias AUDIO_S16LSB = SDL_AudioFormat.AUDIO_S16LSB;alias AUDIO_U16MSB = SDL_AudioFormat.AUDIO_U16MSB;alias AUDIO_S16MSB = SDL_AudioFormat.AUDIO_S16MSB;alias AUDIO_U16 = SDL_AudioFormat.AUDIO_U16;alias AUDIO_S16 = SDL_AudioFormat.AUDIO_S16;alias AUDIO_S32LSB = SDL_AudioFormat.AUDIO_S32LSB;alias AUDIO_S32MSB = SDL_AudioFormat.AUDIO_S32MSB;alias AUDIO_S32 = SDL_AudioFormat.AUDIO_S32;alias AUDIO_F32LSB = SDL_AudioFormat.AUDIO_F32LSB;alias AUDIO_F32MSB = SDL_AudioFormat.AUDIO_F32MSB;alias AUDIO_F32 = SDL_AudioFormat.AUDIO_F32;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlaudio.d(118,1)
alias SDL_AUDIO_STOPPED = SDL_AudioStatus.SDL_AUDIO_STOPPED;alias SDL_AUDIO_PLAYING = SDL_AudioStatus.SDL_AUDIO_PLAYING;alias SDL_AUDIO_PAUSED = SDL_AudioStatus.SDL_AUDIO_PAUSED;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlscancode.d(542,1)
alias SDL_SCANCODE_UNKNOWN = SDL_Scancode.SDL_SCANCODE_UNKNOWN;alias SDL_SCANCODE_A = SDL_Scancode.SDL_SCANCODE_A;alias SDL_SCANCODE_B = SDL_Scancode.SDL_SCANCODE_B;alias SDL_SCANCODE_C = SDL_Scancode.SDL_SCANCODE_C;alias SDL_SCANCODE_D = SDL_Scancode.SDL_SCANCODE_D;alias SDL_SCANCODE_E = SDL_Scancode.SDL_SCANCODE_E;alias SDL_SCANCODE_F = SDL_Scancode.SDL_SCANCODE_F;alias SDL_SCANCODE_G = SDL_Scancode.SDL_SCANCODE_G;alias SDL_SCANCODE_H = SDL_Scancode.SDL_SCANCODE_H;alias SDL_SCANCODE_I = SDL_Scancode.SDL_SCANCODE_I;alias SDL_SCANCODE_J = SDL_Scancode.SDL_SCANCODE_J;alias SDL_SCANCODE_K = SDL_Scancode.SDL_SCANCODE_K;alias SDL_SCANCODE_L = SDL_Scancode.SDL_SCANCODE_L;alias SDL_SCANCODE_M = SDL_Scancode.SDL_SCANCODE_M;alias SDL_SCANCODE_N = SDL_Scancode.SDL_SCANCODE_N;alias SDL_SCANCODE_O = SDL_Scancode.SDL_SCANCODE_O;alias SDL_SCANCODE_P = SDL_Scancode.SDL_SCANCODE_P;alias SDL_SCANCODE_Q = SDL_Scancode.SDL_SCANCODE_Q;alias SDL_SCANCODE_R = SDL_Scancode.SDL_SCANCODE_R;alias SDL_SCANCODE_S = SDL_Scancode.SDL_SCANCODE_S;alias SDL_SCANCODE_T = SDL_Scancode.SDL_SCANCODE_T;alias SDL_SCANCODE_U = SDL_Scancode.SDL_SCANCODE_U;alias SDL_SCANCODE_V = SDL_Scancode.SDL_SCANCODE_V;alias SDL_SCANCODE_W = SDL_Scancode.SDL_SCANCODE_W;alias SDL_SCANCODE_X = SDL_Scancode.SDL_SCANCODE_X;alias SDL_SCANCODE_Y = SDL_Scancode.SDL_SCANCODE_Y;alias SDL_SCANCODE_Z = SDL_Scancode.SDL_SCANCODE_Z;alias SDL_SCANCODE_1 = SDL_Scancode.SDL_SCANCODE_1;alias SDL_SCANCODE_2 = SDL_Scancode.SDL_SCANCODE_2;alias SDL_SCANCODE_3 = SDL_Scancode.SDL_SCANCODE_3;alias SDL_SCANCODE_4 = SDL_Scancode.SDL_SCANCODE_4;alias SDL_SCANCODE_5 = SDL_Scancode.SDL_SCANCODE_5;alias SDL_SCANCODE_6 = SDL_Scancode.SDL_SCANCODE_6;alias SDL_SCANCODE_7 = SDL_Scancode.SDL_SCANCODE_7;alias SDL_SCANCODE_8 = SDL_Scancode.SDL_SCANCODE_8;alias SDL_SCANCODE_9 = SDL_Scancode.SDL_SCANCODE_9;alias SDL_SCANCODE_0 = SDL_Scancode.SDL_SCANCODE_0;alias SDL_SCANCODE_RETURN = SDL_Scancode.SDL_SCANCODE_RETURN;alias SDL_SCANCODE_ESCAPE = SDL_Scancode.SDL_SCANCODE_ESCAPE;alias SDL_SCANCODE_BACKSPACE = SDL_Scancode.SDL_SCANCODE_BACKSPACE;alias SDL_SCANCODE_TAB = SDL_Scancode.SDL_SCANCODE_TAB;alias SDL_SCANCODE_SPACE = SDL_Scancode.SDL_SCANCODE_SPACE;alias SDL_SCANCODE_MINUS = SDL_Scancode.SDL_SCANCODE_MINUS;alias SDL_SCANCODE_EQUALS = SDL_Scancode.SDL_SCANCODE_EQUALS;alias SDL_SCANCODE_LEFTBRACKET = SDL_Scancode.SDL_SCANCODE_LEFTBRACKET;alias SDL_SCANCODE_RIGHTBRACKET = SDL_Scancode.SDL_SCANCODE_RIGHTBRACKET;alias SDL_SCANCODE_BACKSLASH = SDL_Scancode.SDL_SCANCODE_BACKSLASH;alias SDL_SCANCODE_NONUSHASH = SDL_Scancode.SDL_SCANCODE_NONUSHASH;alias SDL_SCANCODE_SEMICOLON = SDL_Scancode.SDL_SCANCODE_SEMICOLON;alias SDL_SCANCODE_APOSTROPHE = SDL_Scancode.SDL_SCANCODE_APOSTROPHE;alias SDL_SCANCODE_GRAVE = SDL_Scancode.SDL_SCANCODE_GRAVE;alias SDL_SCANCODE_COMMA = SDL_Scancode.SDL_SCANCODE_COMMA;alias SDL_SCANCODE_PERIOD = SDL_Scancode.SDL_SCANCODE_PERIOD;alias SDL_SCANCODE_SLASH = SDL_Scancode.SDL_SCANCODE_SLASH;alias SDL_SCANCODE_CAPSLOCK = SDL_Scancode.SDL_SCANCODE_CAPSLOCK;alias SDL_SCANCODE_F1 = SDL_Scancode.SDL_SCANCODE_F1;alias SDL_SCANCODE_F2 = SDL_Scancode.SDL_SCANCODE_F2;alias SDL_SCANCODE_F3 = SDL_Scancode.SDL_SCANCODE_F3;alias SDL_SCANCODE_F4 = SDL_Scancode.SDL_SCANCODE_F4;alias SDL_SCANCODE_F5 = SDL_Scancode.SDL_SCANCODE_F5;alias SDL_SCANCODE_F6 = SDL_Scancode.SDL_SCANCODE_F6;alias SDL_SCANCODE_F7 = SDL_Scancode.SDL_SCANCODE_F7;alias SDL_SCANCODE_F8 = SDL_Scancode.SDL_SCANCODE_F8;alias SDL_SCANCODE_F9 = SDL_Scancode.SDL_SCANCODE_F9;alias SDL_SCANCODE_F10 = SDL_Scancode.SDL_SCANCODE_F10;alias SDL_SCANCODE_F11 = SDL_Scancode.SDL_SCANCODE_F11;alias SDL_SCANCODE_F12 = SDL_Scancode.SDL_SCANCODE_F12;alias SDL_SCANCODE_PRINTSCREEN = SDL_Scancode.SDL_SCANCODE_PRINTSCREEN;alias SDL_SCANCODE_SCROLLLOCK = SDL_Scancode.SDL_SCANCODE_SCROLLLOCK;alias SDL_SCANCODE_PAUSE = SDL_Scancode.SDL_SCANCODE_PAUSE;alias SDL_SCANCODE_INSERT = SDL_Scancode.SDL_SCANCODE_INSERT;alias SDL_SCANCODE_HOME = SDL_Scancode.SDL_SCANCODE_HOME;alias SDL_SCANCODE_PAGEUP = SDL_Scancode.SDL_SCANCODE_PAGEUP;alias SDL_SCANCODE_DELETE = SDL_Scancode.SDL_SCANCODE_DELETE;alias SDL_SCANCODE_END = SDL_Scancode.SDL_SCANCODE_END;alias SDL_SCANCODE_PAGEDOWN = SDL_Scancode.SDL_SCANCODE_PAGEDOWN;alias SDL_SCANCODE_RIGHT = SDL_Scancode.SDL_SCANCODE_RIGHT;alias SDL_SCANCODE_LEFT = SDL_Scancode.SDL_SCANCODE_LEFT;alias SDL_SCANCODE_DOWN = SDL_Scancode.SDL_SCANCODE_DOWN;alias SDL_SCANCODE_UP = SDL_Scancode.SDL_SCANCODE_UP;alias SDL_SCANCODE_NUMLOCKCLEAR = SDL_Scancode.SDL_SCANCODE_NUMLOCKCLEAR;alias SDL_SCANCODE_KP_DIVIDE = SDL_Scancode.SDL_SCANCODE_KP_DIVIDE;alias SDL_SCANCODE_KP_MULTIPLY = SDL_Scancode.SDL_SCANCODE_KP_MULTIPLY;alias SDL_SCANCODE_KP_MINUS = SDL_Scancode.SDL_SCANCODE_KP_MINUS;alias SDL_SCANCODE_KP_PLUS = SDL_Scancode.SDL_SCANCODE_KP_PLUS;alias SDL_SCANCODE_KP_ENTER = SDL_Scancode.SDL_SCANCODE_KP_ENTER;alias SDL_SCANCODE_KP_1 = SDL_Scancode.SDL_SCANCODE_KP_1;alias SDL_SCANCODE_KP_2 = SDL_Scancode.SDL_SCANCODE_KP_2;alias SDL_SCANCODE_KP_3 = SDL_Scancode.SDL_SCANCODE_KP_3;alias SDL_SCANCODE_KP_4 = SDL_Scancode.SDL_SCANCODE_KP_4;alias SDL_SCANCODE_KP_5 = SDL_Scancode.SDL_SCANCODE_KP_5;alias SDL_SCANCODE_KP_6 = SDL_Scancode.SDL_SCANCODE_KP_6;alias SDL_SCANCODE_KP_7 = SDL_Scancode.SDL_SCANCODE_KP_7;alias SDL_SCANCODE_KP_8 = SDL_Scancode.SDL_SCANCODE_KP_8;alias SDL_SCANCODE_KP_9 = SDL_Scancode.SDL_SCANCODE_KP_9;alias SDL_SCANCODE_KP_0 = SDL_Scancode.SDL_SCANCODE_KP_0;alias SDL_SCANCODE_KP_PERIOD = SDL_Scancode.SDL_SCANCODE_KP_PERIOD;alias SDL_SCANCODE_NONUSBACKSLASH = SDL_Scancode.SDL_SCANCODE_NONUSBACKSLASH;alias SDL_SCANCODE_APPLICATION = SDL_Scancode.SDL_SCANCODE_APPLICATION;alias SDL_SCANCODE_POWER = SDL_Scancode.SDL_SCANCODE_POWER;alias SDL_SCANCODE_KP_EQUALS = SDL_Scancode.SDL_SCANCODE_KP_EQUALS;alias SDL_SCANCODE_F13 = SDL_Scancode.SDL_SCANCODE_F13;alias SDL_SCANCODE_F14 = SDL_Scancode.SDL_SCANCODE_F14;alias SDL_SCANCODE_F15 = SDL_Scancode.SDL_SCANCODE_F15;alias SDL_SCANCODE_F16 = SDL_Scancode.SDL_SCANCODE_F16;alias SDL_SCANCODE_F17 = SDL_Scancode.SDL_SCANCODE_F17;alias SDL_SCANCODE_F18 = SDL_Scancode.SDL_SCANCODE_F18;alias SDL_SCANCODE_F19 = SDL_Scancode.SDL_SCANCODE_F19;alias SDL_SCANCODE_F20 = SDL_Scancode.SDL_SCANCODE_F20;alias SDL_SCANCODE_F21 = SDL_Scancode.SDL_SCANCODE_F21;alias SDL_SCANCODE_F22 = SDL_Scancode.SDL_SCANCODE_F22;alias SDL_SCANCODE_F23 = SDL_Scancode.SDL_SCANCODE_F23;alias SDL_SCANCODE_F24 = SDL_Scancode.SDL_SCANCODE_F24;alias SDL_SCANCODE_EXECUTE = SDL_Scancode.SDL_SCANCODE_EXECUTE;alias SDL_SCANCODE_HELP = SDL_Scancode.SDL_SCANCODE_HELP;alias SDL_SCANCODE_MENU = SDL_Scancode.SDL_SCANCODE_MENU;alias SDL_SCANCODE_SELECT = SDL_Scancode.SDL_SCANCODE_SELECT;alias SDL_SCANCODE_STOP = SDL_Scancode.SDL_SCANCODE_STOP;alias SDL_SCANCODE_AGAIN = SDL_Scancode.SDL_SCANCODE_AGAIN;alias SDL_SCANCODE_UNDO = SDL_Scancode.SDL_SCANCODE_UNDO;alias SDL_SCANCODE_CUT = SDL_Scancode.SDL_SCANCODE_CUT;alias SDL_SCANCODE_COPY = SDL_Scancode.SDL_SCANCODE_COPY;alias SDL_SCANCODE_PASTE = SDL_Scancode.SDL_SCANCODE_PASTE;alias SDL_SCANCODE_FIND = SDL_Scancode.SDL_SCANCODE_FIND;alias SDL_SCANCODE_MUTE = SDL_Scancode.SDL_SCANCODE_MUTE;alias SDL_SCANCODE_VOLUMEUP = SDL_Scancode.SDL_SCANCODE_VOLUMEUP;alias SDL_SCANCODE_VOLUMEDOWN = SDL_Scancode.SDL_SCANCODE_VOLUMEDOWN;alias SDL_SCANCODE_KP_COMMA = SDL_Scancode.SDL_SCANCODE_KP_COMMA;alias SDL_SCANCODE_KP_EQUALSAS400 = SDL_Scancode.SDL_SCANCODE_KP_EQUALSAS400;alias SDL_SCANCODE_INTERNATIONAL1 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL1;alias SDL_SCANCODE_INTERNATIONAL2 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL2;alias SDL_SCANCODE_INTERNATIONAL3 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL3;alias SDL_SCANCODE_INTERNATIONAL4 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL4;alias SDL_SCANCODE_INTERNATIONAL5 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL5;alias SDL_SCANCODE_INTERNATIONAL6 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL6;alias SDL_SCANCODE_INTERNATIONAL7 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL7;alias SDL_SCANCODE_INTERNATIONAL8 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL8;alias SDL_SCANCODE_INTERNATIONAL9 = SDL_Scancode.SDL_SCANCODE_INTERNATIONAL9;alias SDL_SCANCODE_LANG1 = SDL_Scancode.SDL_SCANCODE_LANG1;alias SDL_SCANCODE_LANG2 = SDL_Scancode.SDL_SCANCODE_LANG2;alias SDL_SCANCODE_LANG3 = SDL_Scancode.SDL_SCANCODE_LANG3;alias SDL_SCANCODE_LANG4 = SDL_Scancode.SDL_SCANCODE_LANG4;alias SDL_SCANCODE_LANG5 = SDL_Scancode.SDL_SCANCODE_LANG5;alias SDL_SCANCODE_LANG6 = SDL_Scancode.SDL_SCANCODE_LANG6;alias SDL_SCANCODE_LANG7 = SDL_Scancode.SDL_SCANCODE_LANG7;alias SDL_SCANCODE_LANG8 = SDL_Scancode.SDL_SCANCODE_LANG8;alias SDL_SCANCODE_LANG9 = SDL_Scancode.SDL_SCANCODE_LANG9;alias SDL_SCANCODE_ALTERASE = SDL_Scancode.SDL_SCANCODE_ALTERASE;alias SDL_SCANCODE_SYSREQ = SDL_Scancode.SDL_SCANCODE_SYSREQ;alias SDL_SCANCODE_CANCEL = SDL_Scancode.SDL_SCANCODE_CANCEL;alias SDL_SCANCODE_CLEAR = SDL_Scancode.SDL_SCANCODE_CLEAR;alias SDL_SCANCODE_PRIOR = SDL_Scancode.SDL_SCANCODE_PRIOR;alias SDL_SCANCODE_RETURN2 = SDL_Scancode.SDL_SCANCODE_RETURN2;alias SDL_SCANCODE_SEPARATOR = SDL_Scancode.SDL_SCANCODE_SEPARATOR;alias SDL_SCANCODE_OUT = SDL_Scancode.SDL_SCANCODE_OUT;alias SDL_SCANCODE_OPER = SDL_Scancode.SDL_SCANCODE_OPER;alias SDL_SCANCODE_CLEARAGAIN = SDL_Scancode.SDL_SCANCODE_CLEARAGAIN;alias SDL_SCANCODE_CRSEL = SDL_Scancode.SDL_SCANCODE_CRSEL;alias SDL_SCANCODE_EXSEL = SDL_Scancode.SDL_SCANCODE_EXSEL;alias SDL_SCANCODE_KP_00 = SDL_Scancode.SDL_SCANCODE_KP_00;alias SDL_SCANCODE_KP_000 = SDL_Scancode.SDL_SCANCODE_KP_000;alias SDL_SCANCODE_THOUSANDSSEPARATOR = SDL_Scancode.SDL_SCANCODE_THOUSANDSSEPARATOR;alias SDL_SCANCODE_DECIMALSEPARATOR = SDL_Scancode.SDL_SCANCODE_DECIMALSEPARATOR;alias SDL_SCANCODE_CURRENCYUNIT = SDL_Scancode.SDL_SCANCODE_CURRENCYUNIT;alias SDL_SCANCODE_CURRENCYSUBUNIT = SDL_Scancode.SDL_SCANCODE_CURRENCYSUBUNIT;alias SDL_SCANCODE_KP_LEFTPAREN = SDL_Scancode.SDL_SCANCODE_KP_LEFTPAREN;alias SDL_SCANCODE_KP_RIGHTPAREN = SDL_Scancode.SDL_SCANCODE_KP_RIGHTPAREN;alias SDL_SCANCODE_KP_LEFTBRACE = SDL_Scancode.SDL_SCANCODE_KP_LEFTBRACE;alias SDL_SCANCODE_KP_RIGHTBRACE = SDL_Scancode.SDL_SCANCODE_KP_RIGHTBRACE;alias SDL_SCANCODE_KP_TAB = SDL_Scancode.SDL_SCANCODE_KP_TAB;alias SDL_SCANCODE_KP_BACKSPACE = SDL_Scancode.SDL_SCANCODE_KP_BACKSPACE;alias SDL_SCANCODE_KP_A = SDL_Scancode.SDL_SCANCODE_KP_A;alias SDL_SCANCODE_KP_B = SDL_Scancode.SDL_SCANCODE_KP_B;alias SDL_SCANCODE_KP_C = SDL_Scancode.SDL_SCANCODE_KP_C;alias SDL_SCANCODE_KP_D = SDL_Scancode.SDL_SCANCODE_KP_D;alias SDL_SCANCODE_KP_E = SDL_Scancode.SDL_SCANCODE_KP_E;alias SDL_SCANCODE_KP_F = SDL_Scancode.SDL_SCANCODE_KP_F;alias SDL_SCANCODE_KP_XOR = SDL_Scancode.SDL_SCANCODE_KP_XOR;alias SDL_SCANCODE_KP_POWER = SDL_Scancode.SDL_SCANCODE_KP_POWER;alias SDL_SCANCODE_KP_PERCENT = SDL_Scancode.SDL_SCANCODE_KP_PERCENT;alias SDL_SCANCODE_KP_LESS = SDL_Scancode.SDL_SCANCODE_KP_LESS;alias SDL_SCANCODE_KP_GREATER = SDL_Scancode.SDL_SCANCODE_KP_GREATER;alias SDL_SCANCODE_KP_AMPERSAND = SDL_Scancode.SDL_SCANCODE_KP_AMPERSAND;alias SDL_SCANCODE_KP_DBLAMPERSAND = SDL_Scancode.SDL_SCANCODE_KP_DBLAMPERSAND;alias SDL_SCANCODE_KP_VERTICALBAR = SDL_Scancode.SDL_SCANCODE_KP_VERTICALBAR;alias SDL_SCANCODE_KP_DBLVERTICALBAR = SDL_Scancode.SDL_SCANCODE_KP_DBLVERTICALBAR;alias SDL_SCANCODE_KP_COLON = SDL_Scancode.SDL_SCANCODE_KP_COLON;alias SDL_SCANCODE_KP_HASH = SDL_Scancode.SDL_SCANCODE_KP_HASH;alias SDL_SCANCODE_KP_SPACE = SDL_Scancode.SDL_SCANCODE_KP_SPACE;alias SDL_SCANCODE_KP_AT = SDL_Scancode.SDL_SCANCODE_KP_AT;alias SDL_SCANCODE_KP_EXCLAM = SDL_Scancode.SDL_SCANCODE_KP_EXCLAM;alias SDL_SCANCODE_KP_MEMSTORE = SDL_Scancode.SDL_SCANCODE_KP_MEMSTORE;alias SDL_SCANCODE_KP_MEMRECALL = SDL_Scancode.SDL_SCANCODE_KP_MEMRECALL;alias SDL_SCANCODE_KP_MEMCLEAR = SDL_Scancode.SDL_SCANCODE_KP_MEMCLEAR;alias SDL_SCANCODE_KP_MEMADD = SDL_Scancode.SDL_SCANCODE_KP_MEMADD;alias SDL_SCANCODE_KP_MEMSUBTRACT = SDL_Scancode.SDL_SCANCODE_KP_MEMSUBTRACT;alias SDL_SCANCODE_KP_MEMMULTIPLY = SDL_Scancode.SDL_SCANCODE_KP_MEMMULTIPLY;alias SDL_SCANCODE_KP_MEMDIVIDE = SDL_Scancode.SDL_SCANCODE_KP_MEMDIVIDE;alias SDL_SCANCODE_KP_PLUSMINUS = SDL_Scancode.SDL_SCANCODE_KP_PLUSMINUS;alias SDL_SCANCODE_KP_CLEAR = SDL_Scancode.SDL_SCANCODE_KP_CLEAR;alias SDL_SCANCODE_KP_CLEARENTRY = SDL_Scancode.SDL_SCANCODE_KP_CLEARENTRY;alias SDL_SCANCODE_KP_BINARY = SDL_Scancode.SDL_SCANCODE_KP_BINARY;alias SDL_SCANCODE_KP_OCTAL = SDL_Scancode.SDL_SCANCODE_KP_OCTAL;alias SDL_SCANCODE_KP_DECIMAL = SDL_Scancode.SDL_SCANCODE_KP_DECIMAL;alias SDL_SCANCODE_KP_HEXADECIMAL = SDL_Scancode.SDL_SCANCODE_KP_HEXADECIMAL;alias SDL_SCANCODE_LCTRL = SDL_Scancode.SDL_SCANCODE_LCTRL;alias SDL_SCANCODE_LSHIFT = SDL_Scancode.SDL_SCANCODE_LSHIFT;alias SDL_SCANCODE_LALT = SDL_Scancode.SDL_SCANCODE_LALT;alias SDL_SCANCODE_LGUI = SDL_Scancode.SDL_SCANCODE_LGUI;alias SDL_SCANCODE_RCTRL = SDL_Scancode.SDL_SCANCODE_RCTRL;alias SDL_SCANCODE_RSHIFT = SDL_Scancode.SDL_SCANCODE_RSHIFT;alias SDL_SCANCODE_RALT = SDL_Scancode.SDL_SCANCODE_RALT;alias SDL_SCANCODE_RGUI = SDL_Scancode.SDL_SCANCODE_RGUI;alias SDL_SCANCODE_MODE = SDL_Scancode.SDL_SCANCODE_MODE;alias SDL_SCANCODE_AUDIONEXT = SDL_Scancode.SDL_SCANCODE_AUDIONEXT;alias SDL_SCANCODE_AUDIOPREV = SDL_Scancode.SDL_SCANCODE_AUDIOPREV;alias SDL_SCANCODE_AUDIOSTOP = SDL_Scancode.SDL_SCANCODE_AUDIOSTOP;alias SDL_SCANCODE_AUDIOPLAY = SDL_Scancode.SDL_SCANCODE_AUDIOPLAY;alias SDL_SCANCODE_AUDIOMUTE = SDL_Scancode.SDL_SCANCODE_AUDIOMUTE;alias SDL_SCANCODE_MEDIASELECT = SDL_Scancode.SDL_SCANCODE_MEDIASELECT;alias SDL_SCANCODE_WWW = SDL_Scancode.SDL_SCANCODE_WWW;alias SDL_SCANCODE_MAIL = SDL_Scancode.SDL_SCANCODE_MAIL;alias SDL_SCANCODE_CALCULATOR = SDL_Scancode.SDL_SCANCODE_CALCULATOR;alias SDL_SCANCODE_COMPUTER = SDL_Scancode.SDL_SCANCODE_COMPUTER;alias SDL_SCANCODE_AC_SEARCH = SDL_Scancode.SDL_SCANCODE_AC_SEARCH;alias SDL_SCANCODE_AC_HOME = SDL_Scancode.SDL_SCANCODE_AC_HOME;alias SDL_SCANCODE_AC_BACK = SDL_Scancode.SDL_SCANCODE_AC_BACK;alias SDL_SCANCODE_AC_FORWARD = SDL_Scancode.SDL_SCANCODE_AC_FORWARD;alias SDL_SCANCODE_AC_STOP = SDL_Scancode.SDL_SCANCODE_AC_STOP;alias SDL_SCANCODE_AC_REFRESH = SDL_Scancode.SDL_SCANCODE_AC_REFRESH;alias SDL_SCANCODE_AC_BOOKMARKS = SDL_Scancode.SDL_SCANCODE_AC_BOOKMARKS;alias SDL_SCANCODE_BRIGHTNESSDOWN = SDL_Scancode.SDL_SCANCODE_BRIGHTNESSDOWN;alias SDL_SCANCODE_BRIGHTNESSUP = SDL_Scancode.SDL_SCANCODE_BRIGHTNESSUP;alias SDL_SCANCODE_DISPLAYSWITCH = SDL_Scancode.SDL_SCANCODE_DISPLAYSWITCH;alias SDL_SCANCODE_KBDILLUMTOGGLE = SDL_Scancode.SDL_SCANCODE_KBDILLUMTOGGLE;alias SDL_SCANCODE_KBDILLUMDOWN = SDL_Scancode.SDL_SCANCODE_KBDILLUMDOWN;alias SDL_SCANCODE_KBDILLUMUP = SDL_Scancode.SDL_SCANCODE_KBDILLUMUP;alias SDL_SCANCODE_EJECT = SDL_Scancode.SDL_SCANCODE_EJECT;alias SDL_SCANCODE_SLEEP = SDL_Scancode.SDL_SCANCODE_SLEEP;alias SDL_SCANCODE_APP1 = SDL_Scancode.SDL_SCANCODE_APP1;alias SDL_SCANCODE_APP2 = SDL_Scancode.SDL_SCANCODE_APP2;alias SDL_NUM_SCANCODES = SDL_Scancode.SDL_NUM_SCANCODES;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlkeycode.d(266,1)
alias SDLK_UNKNOWN = SDL_Keycode.SDLK_UNKNOWN;alias SDLK_RETURN = SDL_Keycode.SDLK_RETURN;alias SDLK_ESCAPE = SDL_Keycode.SDLK_ESCAPE;alias SDLK_BACKSPACE = SDL_Keycode.SDLK_BACKSPACE;alias SDLK_TAB = SDL_Keycode.SDLK_TAB;alias SDLK_SPACE = SDL_Keycode.SDLK_SPACE;alias SDLK_EXCLAIM = SDL_Keycode.SDLK_EXCLAIM;alias SDLK_QUOTEDBL = SDL_Keycode.SDLK_QUOTEDBL;alias SDLK_HASH = SDL_Keycode.SDLK_HASH;alias SDLK_PERCENT = SDL_Keycode.SDLK_PERCENT;alias SDLK_DOLLAR = SDL_Keycode.SDLK_DOLLAR;alias SDLK_AMPERSAND = SDL_Keycode.SDLK_AMPERSAND;alias SDLK_QUOTE = SDL_Keycode.SDLK_QUOTE;alias SDLK_LEFTPAREN = SDL_Keycode.SDLK_LEFTPAREN;alias SDLK_RIGHTPAREN = SDL_Keycode.SDLK_RIGHTPAREN;alias SDLK_ASTERISK = SDL_Keycode.SDLK_ASTERISK;alias SDLK_PLUS = SDL_Keycode.SDLK_PLUS;alias SDLK_COMMA = SDL_Keycode.SDLK_COMMA;alias SDLK_MINUS = SDL_Keycode.SDLK_MINUS;alias SDLK_PERIOD = SDL_Keycode.SDLK_PERIOD;alias SDLK_SLASH = SDL_Keycode.SDLK_SLASH;alias SDLK_0 = SDL_Keycode.SDLK_0;alias SDLK_1 = SDL_Keycode.SDLK_1;alias SDLK_2 = SDL_Keycode.SDLK_2;alias SDLK_3 = SDL_Keycode.SDLK_3;alias SDLK_4 = SDL_Keycode.SDLK_4;alias SDLK_5 = SDL_Keycode.SDLK_5;alias SDLK_6 = SDL_Keycode.SDLK_6;alias SDLK_7 = SDL_Keycode.SDLK_7;alias SDLK_8 = SDL_Keycode.SDLK_8;alias SDLK_9 = SDL_Keycode.SDLK_9;alias SDLK_COLON = SDL_Keycode.SDLK_COLON;alias SDLK_SEMICOLON = SDL_Keycode.SDLK_SEMICOLON;alias SDLK_LESS = SDL_Keycode.SDLK_LESS;alias SDLK_EQUALS = SDL_Keycode.SDLK_EQUALS;alias SDLK_GREATER = SDL_Keycode.SDLK_GREATER;alias SDLK_QUESTION = SDL_Keycode.SDLK_QUESTION;alias SDLK_AT = SDL_Keycode.SDLK_AT;alias SDLK_LEFTBRACKET = SDL_Keycode.SDLK_LEFTBRACKET;alias SDLK_BACKSLASH = SDL_Keycode.SDLK_BACKSLASH;alias SDLK_RIGHTBRACKET = SDL_Keycode.SDLK_RIGHTBRACKET;alias SDLK_CARET = SDL_Keycode.SDLK_CARET;alias SDLK_UNDERSCORE = SDL_Keycode.SDLK_UNDERSCORE;alias SDLK_BACKQUOTE = SDL_Keycode.SDLK_BACKQUOTE;alias SDLK_a = SDL_Keycode.SDLK_a;alias SDLK_b = SDL_Keycode.SDLK_b;alias SDLK_c = SDL_Keycode.SDLK_c;alias SDLK_d = SDL_Keycode.SDLK_d;alias SDLK_e = SDL_Keycode.SDLK_e;alias SDLK_f = SDL_Keycode.SDLK_f;alias SDLK_g = SDL_Keycode.SDLK_g;alias SDLK_h = SDL_Keycode.SDLK_h;alias SDLK_i = SDL_Keycode.SDLK_i;alias SDLK_j = SDL_Keycode.SDLK_j;alias SDLK_k = SDL_Keycode.SDLK_k;alias SDLK_l = SDL_Keycode.SDLK_l;alias SDLK_m = SDL_Keycode.SDLK_m;alias SDLK_n = SDL_Keycode.SDLK_n;alias SDLK_o = SDL_Keycode.SDLK_o;alias SDLK_p = SDL_Keycode.SDLK_p;alias SDLK_q = SDL_Keycode.SDLK_q;alias SDLK_r = SDL_Keycode.SDLK_r;alias SDLK_s = SDL_Keycode.SDLK_s;alias SDLK_t = SDL_Keycode.SDLK_t;alias SDLK_u = SDL_Keycode.SDLK_u;alias SDLK_v = SDL_Keycode.SDLK_v;alias SDLK_w = SDL_Keycode.SDLK_w;alias SDLK_x = SDL_Keycode.SDLK_x;alias SDLK_y = SDL_Keycode.SDLK_y;alias SDLK_z = SDL_Keycode.SDLK_z;alias SDLK_CAPSLOCK = SDL_Keycode.SDLK_CAPSLOCK;alias SDLK_F1 = SDL_Keycode.SDLK_F1;alias SDLK_F2 = SDL_Keycode.SDLK_F2;alias SDLK_F3 = SDL_Keycode.SDLK_F3;alias SDLK_F4 = SDL_Keycode.SDLK_F4;alias SDLK_F5 = SDL_Keycode.SDLK_F5;alias SDLK_F6 = SDL_Keycode.SDLK_F6;alias SDLK_F7 = SDL_Keycode.SDLK_F7;alias SDLK_F8 = SDL_Keycode.SDLK_F8;alias SDLK_F9 = SDL_Keycode.SDLK_F9;alias SDLK_F10 = SDL_Keycode.SDLK_F10;alias SDLK_F11 = SDL_Keycode.SDLK_F11;alias SDLK_F12 = SDL_Keycode.SDLK_F12;alias SDLK_PRINTSCREEN = SDL_Keycode.SDLK_PRINTSCREEN;alias SDLK_SCROLLLOCK = SDL_Keycode.SDLK_SCROLLLOCK;alias SDLK_PAUSE = SDL_Keycode.SDLK_PAUSE;alias SDLK_INSERT = SDL_Keycode.SDLK_INSERT;alias SDLK_HOME = SDL_Keycode.SDLK_HOME;alias SDLK_PAGEUP = SDL_Keycode.SDLK_PAGEUP;alias SDLK_DELETE = SDL_Keycode.SDLK_DELETE;alias SDLK_END = SDL_Keycode.SDLK_END;alias SDLK_PAGEDOWN = SDL_Keycode.SDLK_PAGEDOWN;alias SDLK_RIGHT = SDL_Keycode.SDLK_RIGHT;alias SDLK_LEFT = SDL_Keycode.SDLK_LEFT;alias SDLK_DOWN = SDL_Keycode.SDLK_DOWN;alias SDLK_UP = SDL_Keycode.SDLK_UP;alias SDLK_NUMLOCKCLEAR = SDL_Keycode.SDLK_NUMLOCKCLEAR;alias SDLK_KP_DIVIDE = SDL_Keycode.SDLK_KP_DIVIDE;alias SDLK_KP_MULTIPLY = SDL_Keycode.SDLK_KP_MULTIPLY;alias SDLK_KP_MINUS = SDL_Keycode.SDLK_KP_MINUS;alias SDLK_KP_PLUS = SDL_Keycode.SDLK_KP_PLUS;alias SDLK_KP_ENTER = SDL_Keycode.SDLK_KP_ENTER;alias SDLK_KP_1 = SDL_Keycode.SDLK_KP_1;alias SDLK_KP_2 = SDL_Keycode.SDLK_KP_2;alias SDLK_KP_3 = SDL_Keycode.SDLK_KP_3;alias SDLK_KP_4 = SDL_Keycode.SDLK_KP_4;alias SDLK_KP_5 = SDL_Keycode.SDLK_KP_5;alias SDLK_KP_6 = SDL_Keycode.SDLK_KP_6;alias SDLK_KP_7 = SDL_Keycode.SDLK_KP_7;alias SDLK_KP_8 = SDL_Keycode.SDLK_KP_8;alias SDLK_KP_9 = SDL_Keycode.SDLK_KP_9;alias SDLK_KP_0 = SDL_Keycode.SDLK_KP_0;alias SDLK_KP_PERIOD = SDL_Keycode.SDLK_KP_PERIOD;alias SDLK_APPLICATION = SDL_Keycode.SDLK_APPLICATION;alias SDLK_POWER = SDL_Keycode.SDLK_POWER;alias SDLK_KP_EQUALS = SDL_Keycode.SDLK_KP_EQUALS;alias SDLK_F13 = SDL_Keycode.SDLK_F13;alias SDLK_F14 = SDL_Keycode.SDLK_F14;alias SDLK_F15 = SDL_Keycode.SDLK_F15;alias SDLK_F16 = SDL_Keycode.SDLK_F16;alias SDLK_F17 = SDL_Keycode.SDLK_F17;alias SDLK_F18 = SDL_Keycode.SDLK_F18;alias SDLK_F19 = SDL_Keycode.SDLK_F19;alias SDLK_F20 = SDL_Keycode.SDLK_F20;alias SDLK_F21 = SDL_Keycode.SDLK_F21;alias SDLK_F22 = SDL_Keycode.SDLK_F22;alias SDLK_F23 = SDL_Keycode.SDLK_F23;alias SDLK_F24 = SDL_Keycode.SDLK_F24;alias SDLK_EXECUTE = SDL_Keycode.SDLK_EXECUTE;alias SDLK_HELP = SDL_Keycode.SDLK_HELP;alias SDLK_MENU = SDL_Keycode.SDLK_MENU;alias SDLK_SELECT = SDL_Keycode.SDLK_SELECT;alias SDLK_STOP = SDL_Keycode.SDLK_STOP;alias SDLK_AGAIN = SDL_Keycode.SDLK_AGAIN;alias SDLK_UNDO = SDL_Keycode.SDLK_UNDO;alias SDLK_CUT = SDL_Keycode.SDLK_CUT;alias SDLK_COPY = SDL_Keycode.SDLK_COPY;alias SDLK_PASTE = SDL_Keycode.SDLK_PASTE;alias SDLK_FIND = SDL_Keycode.SDLK_FIND;alias SDLK_MUTE = SDL_Keycode.SDLK_MUTE;alias SDLK_VOLUMEUP = SDL_Keycode.SDLK_VOLUMEUP;alias SDLK_VOLUMEDOWN = SDL_Keycode.SDLK_VOLUMEDOWN;alias SDLK_KP_COMMA = SDL_Keycode.SDLK_KP_COMMA;alias SDLK_KP_EQUALSAS400 = SDL_Keycode.SDLK_KP_EQUALSAS400;alias SDLK_ALTERASE = SDL_Keycode.SDLK_ALTERASE;alias SDLK_SYSREQ = SDL_Keycode.SDLK_SYSREQ;alias SDLK_CANCEL = SDL_Keycode.SDLK_CANCEL;alias SDLK_CLEAR = SDL_Keycode.SDLK_CLEAR;alias SDLK_PRIOR = SDL_Keycode.SDLK_PRIOR;alias SDLK_RETURN2 = SDL_Keycode.SDLK_RETURN2;alias SDLK_SEPARATOR = SDL_Keycode.SDLK_SEPARATOR;alias SDLK_OUT = SDL_Keycode.SDLK_OUT;alias SDLK_OPER = SDL_Keycode.SDLK_OPER;alias SDLK_CLEARAGAIN = SDL_Keycode.SDLK_CLEARAGAIN;alias SDLK_CRSEL = SDL_Keycode.SDLK_CRSEL;alias SDLK_EXSEL = SDL_Keycode.SDLK_EXSEL;alias SDLK_KP_00 = SDL_Keycode.SDLK_KP_00;alias SDLK_KP_000 = SDL_Keycode.SDLK_KP_000;alias SDLK_THOUSANDSSEPARATOR = SDL_Keycode.SDLK_THOUSANDSSEPARATOR;alias SDLK_DECIMALSEPARATOR = SDL_Keycode.SDLK_DECIMALSEPARATOR;alias SDLK_CURRENCYUNIT = SDL_Keycode.SDLK_CURRENCYUNIT;alias SDLK_CURRENCYSUBUNIT = SDL_Keycode.SDLK_CURRENCYSUBUNIT;alias SDLK_KP_LEFTPAREN = SDL_Keycode.SDLK_KP_LEFTPAREN;alias SDLK_KP_RIGHTPAREN = SDL_Keycode.SDLK_KP_RIGHTPAREN;alias SDLK_KP_LEFTBRACE = SDL_Keycode.SDLK_KP_LEFTBRACE;alias SDLK_KP_RIGHTBRACE = SDL_Keycode.SDLK_KP_RIGHTBRACE;alias SDLK_KP_TAB = SDL_Keycode.SDLK_KP_TAB;alias SDLK_KP_BACKSPACE = SDL_Keycode.SDLK_KP_BACKSPACE;alias SDLK_KP_A = SDL_Keycode.SDLK_KP_A;alias SDLK_KP_B = SDL_Keycode.SDLK_KP_B;alias SDLK_KP_C = SDL_Keycode.SDLK_KP_C;alias SDLK_KP_D = SDL_Keycode.SDLK_KP_D;alias SDLK_KP_E = SDL_Keycode.SDLK_KP_E;alias SDLK_KP_F = SDL_Keycode.SDLK_KP_F;alias SDLK_KP_XOR = SDL_Keycode.SDLK_KP_XOR;alias SDLK_KP_POWER = SDL_Keycode.SDLK_KP_POWER;alias SDLK_KP_PERCENT = SDL_Keycode.SDLK_KP_PERCENT;alias SDLK_KP_LESS = SDL_Keycode.SDLK_KP_LESS;alias SDLK_KP_GREATER = SDL_Keycode.SDLK_KP_GREATER;alias SDLK_KP_AMPERSAND = SDL_Keycode.SDLK_KP_AMPERSAND;alias SDLK_KP_DBLAMPERSAND = SDL_Keycode.SDLK_KP_DBLAMPERSAND;alias SDLK_KP_VERTICALBAR = SDL_Keycode.SDLK_KP_VERTICALBAR;alias SDLK_KP_DBLVERTICALBAR = SDL_Keycode.SDLK_KP_DBLVERTICALBAR;alias SDLK_KP_COLON = SDL_Keycode.SDLK_KP_COLON;alias SDLK_KP_HASH = SDL_Keycode.SDLK_KP_HASH;alias SDLK_KP_SPACE = SDL_Keycode.SDLK_KP_SPACE;alias SDLK_KP_AT = SDL_Keycode.SDLK_KP_AT;alias SDLK_KP_EXCLAM = SDL_Keycode.SDLK_KP_EXCLAM;alias SDLK_KP_MEMSTORE = SDL_Keycode.SDLK_KP_MEMSTORE;alias SDLK_KP_MEMRECALL = SDL_Keycode.SDLK_KP_MEMRECALL;alias SDLK_KP_MEMCLEAR = SDL_Keycode.SDLK_KP_MEMCLEAR;alias SDLK_KP_MEMADD = SDL_Keycode.SDLK_KP_MEMADD;alias SDLK_KP_MEMSUBTRACT = SDL_Keycode.SDLK_KP_MEMSUBTRACT;alias SDLK_KP_MEMMULTIPLY = SDL_Keycode.SDLK_KP_MEMMULTIPLY;alias SDLK_KP_MEMDIVIDE = SDL_Keycode.SDLK_KP_MEMDIVIDE;alias SDLK_KP_PLUSMINUS = SDL_Keycode.SDLK_KP_PLUSMINUS;alias SDLK_KP_CLEAR = SDL_Keycode.SDLK_KP_CLEAR;alias SDLK_KP_CLEARENTRY = SDL_Keycode.SDLK_KP_CLEARENTRY;alias SDLK_KP_BINARY = SDL_Keycode.SDLK_KP_BINARY;alias SDLK_KP_OCTAL = SDL_Keycode.SDLK_KP_OCTAL;alias SDLK_KP_DECIMAL = SDL_Keycode.SDLK_KP_DECIMAL;alias SDLK_KP_HEXADECIMAL = SDL_Keycode.SDLK_KP_HEXADECIMAL;alias SDLK_LCTRL = SDL_Keycode.SDLK_LCTRL;alias SDLK_LSHIFT = SDL_Keycode.SDLK_LSHIFT;alias SDLK_LALT = SDL_Keycode.SDLK_LALT;alias SDLK_LGUI = SDL_Keycode.SDLK_LGUI;alias SDLK_RCTRL = SDL_Keycode.SDLK_RCTRL;alias SDLK_RSHIFT = SDL_Keycode.SDLK_RSHIFT;alias SDLK_RALT = SDL_Keycode.SDLK_RALT;alias SDLK_RGUI = SDL_Keycode.SDLK_RGUI;alias SDLK_MODE = SDL_Keycode.SDLK_MODE;alias SDLK_AUDIONEXT = SDL_Keycode.SDLK_AUDIONEXT;alias SDLK_AUDIOPREV = SDL_Keycode.SDLK_AUDIOPREV;alias SDLK_AUDIOSTOP = SDL_Keycode.SDLK_AUDIOSTOP;alias SDLK_AUDIOPLAY = SDL_Keycode.SDLK_AUDIOPLAY;alias SDLK_AUDIOMUTE = SDL_Keycode.SDLK_AUDIOMUTE;alias SDLK_MEDIASELECT = SDL_Keycode.SDLK_MEDIASELECT;alias SDLK_WWW = SDL_Keycode.SDLK_WWW;alias SDLK_MAIL = SDL_Keycode.SDLK_MAIL;alias SDLK_CALCULATOR = SDL_Keycode.SDLK_CALCULATOR;alias SDLK_COMPUTER = SDL_Keycode.SDLK_COMPUTER;alias SDLK_AC_SEARCH = SDL_Keycode.SDLK_AC_SEARCH;alias SDLK_AC_HOME = SDL_Keycode.SDLK_AC_HOME;alias SDLK_AC_BACK = SDL_Keycode.SDLK_AC_BACK;alias SDLK_AC_FORWARD = SDL_Keycode.SDLK_AC_FORWARD;alias SDLK_AC_STOP = SDL_Keycode.SDLK_AC_STOP;alias SDLK_AC_REFRESH = SDL_Keycode.SDLK_AC_REFRESH;alias SDLK_AC_BOOKMARKS = SDL_Keycode.SDLK_AC_BOOKMARKS;alias SDLK_BRIGHTNESSDOWN = SDL_Keycode.SDLK_BRIGHTNESSDOWN;alias SDLK_BRIGHTNESSUP = SDL_Keycode.SDLK_BRIGHTNESSUP;alias SDLK_DISPLAYSWITCH = SDL_Keycode.SDLK_DISPLAYSWITCH;alias SDLK_KBDILLUMTOGGLE = SDL_Keycode.SDLK_KBDILLUMTOGGLE;alias SDLK_KBDILLUMDOWN = SDL_Keycode.SDLK_KBDILLUMDOWN;alias SDLK_KBDILLUMUP = SDL_Keycode.SDLK_KBDILLUMUP;alias SDLK_EJECT = SDL_Keycode.SDLK_EJECT;alias SDLK_SLEEP = SDL_Keycode.SDLK_SLEEP;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlkeycode.d(289,1)
alias KMOD_NONE = SDL_Keymod.KMOD_NONE;alias KMOD_LSHIFT = SDL_Keymod.KMOD_LSHIFT;alias KMOD_RSHIFT = SDL_Keymod.KMOD_RSHIFT;alias KMOD_LCTRL = SDL_Keymod.KMOD_LCTRL;alias KMOD_RCTRL = SDL_Keymod.KMOD_RCTRL;alias KMOD_LALT = SDL_Keymod.KMOD_LALT;alias KMOD_RALT = SDL_Keymod.KMOD_RALT;alias KMOD_LGUI = SDL_Keymod.KMOD_LGUI;alias KMOD_RGUI = SDL_Keymod.KMOD_RGUI;alias KMOD_NUM = SDL_Keymod.KMOD_NUM;alias KMOD_CAPS = SDL_Keymod.KMOD_CAPS;alias KMOD_MODE = SDL_Keymod.KMOD_MODE;alias KMOD_RESERVED = SDL_Keymod.KMOD_RESERVED;alias KMOD_SCROLL = SDL_Keymod.KMOD_SCROLL;alias KMOD_CTRL = SDL_Keymod.KMOD_CTRL;alias KMOD_SHIFT = SDL_Keymod.KMOD_SHIFT;alias KMOD_ALT = SDL_Keymod.KMOD_ALT;alias KMOD_GUI = SDL_Keymod.KMOD_GUI;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlpixels.d(29,1)
alias SDL_PIXELTYPE_UNKNOWN = SDL_PixelType.SDL_PIXELTYPE_UNKNOWN;alias SDL_PIXELTYPE_INDEX1 = SDL_PixelType.SDL_PIXELTYPE_INDEX1;alias SDL_PIXELTYPE_INDEX4 = SDL_PixelType.SDL_PIXELTYPE_INDEX4;alias SDL_PIXELTYPE_INDEX8 = SDL_PixelType.SDL_PIXELTYPE_INDEX8;alias SDL_PIXELTYPE_PACKED8 = SDL_PixelType.SDL_PIXELTYPE_PACKED8;alias SDL_PIXELTYPE_PACKED16 = SDL_PixelType.SDL_PIXELTYPE_PACKED16;alias SDL_PIXELTYPE_PACKED32 = SDL_PixelType.SDL_PIXELTYPE_PACKED32;alias SDL_PIXELTYPE_ARRAYU8 = SDL_PixelType.SDL_PIXELTYPE_ARRAYU8;alias SDL_PIXELTYPE_ARRAYU16 = SDL_PixelType.SDL_PIXELTYPE_ARRAYU16;alias SDL_PIXELTYPE_ARRAYU32 = SDL_PixelType.SDL_PIXELTYPE_ARRAYU32;alias SDL_PIXELTYPE_ARRAYF16 = SDL_PixelType.SDL_PIXELTYPE_ARRAYF16;alias SDL_PIXELTYPE_ARRAYF32 = SDL_PixelType.SDL_PIXELTYPE_ARRAYF32;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlpixels.d(36,1)
alias SDL_BITMAPORDER_NONE = SDL_BitmapOrder.SDL_BITMAPORDER_NONE;alias SDL_BITMAPORDER_4321 = SDL_BitmapOrder.SDL_BITMAPORDER_4321;alias SDL_BITMAPORDER_1234 = SDL_BitmapOrder.SDL_BITMAPORDER_1234;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlpixels.d(49,1)
alias SDL_PACKEDORDER_NONE = SDL_PackedOrder.SDL_PACKEDORDER_NONE;alias SDL_PACKEDORDER_XRGB = SDL_PackedOrder.SDL_PACKEDORDER_XRGB;alias SDL_PACKEDORDER_RGBX = SDL_PackedOrder.SDL_PACKEDORDER_RGBX;alias SDL_PACKEDORDER_ARGB = SDL_PackedOrder.SDL_PACKEDORDER_ARGB;alias SDL_PACKEDORDER_RGBA = SDL_PackedOrder.SDL_PACKEDORDER_RGBA;alias SDL_PACKEDORDER_XBGR = SDL_PackedOrder.SDL_PACKEDORDER_XBGR;alias SDL_PACKEDORDER_BGRX = SDL_PackedOrder.SDL_PACKEDORDER_BGRX;alias SDL_PACKEDORDER_ABGR = SDL_PackedOrder.SDL_PACKEDORDER_ABGR;alias SDL_PACKEDORDER_BGRA = SDL_PackedOrder.SDL_PACKEDORDER_BGRA;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlpixels.d(60,1)
alias SDL_ARRAYORDER_NONE = SDL_ArrayOrder.SDL_ARRAYORDER_NONE;alias SDL_ARRAYORDER_RGB = SDL_ArrayOrder.SDL_ARRAYORDER_RGB;alias SDL_ARRAYORDER_RGBA = SDL_ArrayOrder.SDL_ARRAYORDER_RGBA;alias SDL_ARRAYORDER_ARGB = SDL_ArrayOrder.SDL_ARRAYORDER_ARGB;alias SDL_ARRAYORDER_BGR = SDL_ArrayOrder.SDL_ARRAYORDER_BGR;alias SDL_ARRAYORDER_BGRA = SDL_ArrayOrder.SDL_ARRAYORDER_BGRA;alias SDL_ARRAYORDER_ABGR = SDL_ArrayOrder.SDL_ARRAYORDER_ABGR;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlpixels.d(73,1)
alias SDL_PACKEDLAYOUT_NONE = SDL_PackedLayout.SDL_PACKEDLAYOUT_NONE;alias SDL_PACKEDLAYOUT_332 = SDL_PackedLayout.SDL_PACKEDLAYOUT_332;alias SDL_PACKEDLAYOUT_4444 = SDL_PackedLayout.SDL_PACKEDLAYOUT_4444;alias SDL_PACKEDLAYOUT_1555 = SDL_PackedLayout.SDL_PACKEDLAYOUT_1555;alias SDL_PACKEDLAYOUT_5551 = SDL_PackedLayout.SDL_PACKEDLAYOUT_5551;alias SDL_PACKEDLAYOUT_565 = SDL_PackedLayout.SDL_PACKEDLAYOUT_565;alias SDL_PACKEDLAYOUT_8888 = SDL_PackedLayout.SDL_PACKEDLAYOUT_8888;alias SDL_PACKEDLAYOUT_2101010 = SDL_PackedLayout.SDL_PACKEDLAYOUT_2101010;alias SDL_PACKEDLAYOUT_1010102 = SDL_PackedLayout.SDL_PACKEDLAYOUT_1010102;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlvideo.d(141,1)
alias SDL_WINDOWEVENT_NONE = SDL_WindowEventID.SDL_WINDOWEVENT_NONE;alias SDL_WINDOWEVENT_SHOWN = SDL_WindowEventID.SDL_WINDOWEVENT_SHOWN;alias SDL_WINDOWEVENT_HIDDEN = SDL_WindowEventID.SDL_WINDOWEVENT_HIDDEN;alias SDL_WINDOWEVENT_EXPOSED = SDL_WindowEventID.SDL_WINDOWEVENT_EXPOSED;alias SDL_WINDOWEVENT_MOVED = SDL_WindowEventID.SDL_WINDOWEVENT_MOVED;alias SDL_WINDOWEVENT_RESIZED = SDL_WindowEventID.SDL_WINDOWEVENT_RESIZED;alias SDL_WINDOWEVENT_SIZE_CHANGED = SDL_WindowEventID.SDL_WINDOWEVENT_SIZE_CHANGED;alias SDL_WINDOWEVENT_MINIMIZED = SDL_WindowEventID.SDL_WINDOWEVENT_MINIMIZED;alias SDL_WINDOWEVENT_MAXIMIZED = SDL_WindowEventID.SDL_WINDOWEVENT_MAXIMIZED;alias SDL_WINDOWEVENT_RESTORED = SDL_WindowEventID.SDL_WINDOWEVENT_RESTORED;alias SDL_WINDOWEVENT_ENTER = SDL_WindowEventID.SDL_WINDOWEVENT_ENTER;alias SDL_WINDOWEVENT_LEAVE = SDL_WindowEventID.SDL_WINDOWEVENT_LEAVE;alias SDL_WINDOWEVENT_FOCUS_GAINED = SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_GAINED;alias SDL_WINDOWEVENT_FOCUS_LOST = SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_LOST;alias SDL_WINDOWEVENT_CLOSE = SDL_WindowEventID.SDL_WINDOWEVENT_CLOSE;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlvideo.d(297,1)
alias SDL_GL_RED_SIZE = SDL_GLattr.SDL_GL_RED_SIZE;alias SDL_GL_GREEN_SIZE = SDL_GLattr.SDL_GL_GREEN_SIZE;alias SDL_GL_BLUE_SIZE = SDL_GLattr.SDL_GL_BLUE_SIZE;alias SDL_GL_ALPHA_SIZE = SDL_GLattr.SDL_GL_ALPHA_SIZE;alias SDL_GL_BUFFER_SIZE = SDL_GLattr.SDL_GL_BUFFER_SIZE;alias SDL_GL_DOUBLEBUFFER = SDL_GLattr.SDL_GL_DOUBLEBUFFER;alias SDL_GL_DEPTH_SIZE = SDL_GLattr.SDL_GL_DEPTH_SIZE;alias SDL_GL_STENCIL_SIZE = SDL_GLattr.SDL_GL_STENCIL_SIZE;alias SDL_GL_ACCUM_RED_SIZE = SDL_GLattr.SDL_GL_ACCUM_RED_SIZE;alias SDL_GL_ACCUM_GREEN_SIZE = SDL_GLattr.SDL_GL_ACCUM_GREEN_SIZE;alias SDL_GL_ACCUM_BLUE_SIZE = SDL_GLattr.SDL_GL_ACCUM_BLUE_SIZE;alias SDL_GL_ACCUM_ALPHA_SIZE = SDL_GLattr.SDL_GL_ACCUM_ALPHA_SIZE;alias SDL_GL_STEREO = SDL_GLattr.SDL_GL_STEREO;alias SDL_GL_MULTISAMPLEBUFFERS = SDL_GLattr.SDL_GL_MULTISAMPLEBUFFERS;alias SDL_GL_MULTISAMPLESAMPLES = SDL_GLattr.SDL_GL_MULTISAMPLESAMPLES;alias SDL_GL_ACCELERATED_VISUAL = SDL_GLattr.SDL_GL_ACCELERATED_VISUAL;alias SDL_GL_RETAINED_BACKING = SDL_GLattr.SDL_GL_RETAINED_BACKING;alias SDL_GL_CONTEXT_MAJOR_VERSION = SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION;alias SDL_GL_CONTEXT_MINOR_VERSION = SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION;alias SDL_GL_CONTEXT_EGL = SDL_GLattr.SDL_GL_CONTEXT_EGL;alias SDL_GL_CONTEXT_FLAGS = SDL_GLattr.SDL_GL_CONTEXT_FLAGS;alias SDL_GL_CONTEXT_PROFILE_MASK = SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK;alias SDL_GL_SHARE_WITH_CURRENT_CONTEXT = SDL_GLattr.SDL_GL_SHARE_WITH_CURRENT_CONTEXT;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlvideo.d(304,1)
alias SDL_GL_CONTEXT_PROFILE_CORE = SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_CORE;alias SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_COMPATIBILITY;alias SDL_GL_CONTEXT_PROFILE_ES = SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_ES;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlsyswm.d(113,1)
alias SDL_SYSWM_UNKNOWN = SDL_SYSWM_TYPE.SDL_SYSWM_UNKNOWN;alias SDL_SYSWM_WINDOWS = SDL_SYSWM_TYPE.SDL_SYSWM_WINDOWS;alias SDL_SYSWM_X11 = SDL_SYSWM_TYPE.SDL_SYSWM_X11;alias SDL_SYSWM_DIRECTFB = SDL_SYSWM_TYPE.SDL_SYSWM_DIRECTFB;alias SDL_SYSWM_COCOA = SDL_SYSWM_TYPE.SDL_SYSWM_COCOA;alias SDL_SYSWM_UIKIT = SDL_SYSWM_TYPE.SDL_SYSWM_UIKIT;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlevents.d(395,1)
alias SDL_FIRSTEVENT = SDL_EventType.SDL_FIRSTEVENT;alias SDL_QUIT = SDL_EventType.SDL_QUIT;alias SDL_APP_TERMINATING = SDL_EventType.SDL_APP_TERMINATING;alias SDL_APP_LOWMEMORY = SDL_EventType.SDL_APP_LOWMEMORY;alias SDL_APP_WILLENTERBACKGROUND = SDL_EventType.SDL_APP_WILLENTERBACKGROUND;alias SDL_APP_DIDENTERBACKGROUND = SDL_EventType.SDL_APP_DIDENTERBACKGROUND;alias SDL_APP_WILLENTERFOREGROUND = SDL_EventType.SDL_APP_WILLENTERFOREGROUND;alias SDL_APP_DIDENTERFOREGROUND = SDL_EventType.SDL_APP_DIDENTERFOREGROUND;alias SDL_WINDOWEVENT = SDL_EventType.SDL_WINDOWEVENT;alias SDL_SYSWMEVENT = SDL_EventType.SDL_SYSWMEVENT;alias SDL_KEYDOWN = SDL_EventType.SDL_KEYDOWN;alias SDL_KEYUP = SDL_EventType.SDL_KEYUP;alias SDL_TEXTEDITING = SDL_EventType.SDL_TEXTEDITING;alias SDL_TEXTINPUT = SDL_EventType.SDL_TEXTINPUT;alias SDL_MOUSEMOTION = SDL_EventType.SDL_MOUSEMOTION;alias SDL_MOUSEBUTTONDOWN = SDL_EventType.SDL_MOUSEBUTTONDOWN;alias SDL_MOUSEBUTTONUP = SDL_EventType.SDL_MOUSEBUTTONUP;alias SDL_MOUSEWHEEL = SDL_EventType.SDL_MOUSEWHEEL;alias SDL_JOYAXISMOTION = SDL_EventType.SDL_JOYAXISMOTION;alias SDL_JOYBALLMOTION = SDL_EventType.SDL_JOYBALLMOTION;alias SDL_JOYHATMOTION = SDL_EventType.SDL_JOYHATMOTION;alias SDL_JOYBUTTONDOWN = SDL_EventType.SDL_JOYBUTTONDOWN;alias SDL_JOYBUTTONUP = SDL_EventType.SDL_JOYBUTTONUP;alias SDL_JOYDEVICEADDED = SDL_EventType.SDL_JOYDEVICEADDED;alias SDL_JOYDEVICEREMOVED = SDL_EventType.SDL_JOYDEVICEREMOVED;alias SDL_CONTROLLERAXISMOTION = SDL_EventType.SDL_CONTROLLERAXISMOTION;alias SDL_CONTROLLERBUTTONDOWN = SDL_EventType.SDL_CONTROLLERBUTTONDOWN;alias SDL_CONTROLLERBUTTONUP = SDL_EventType.SDL_CONTROLLERBUTTONUP;alias SDL_CONTROLLERDEVICEADDED = SDL_EventType.SDL_CONTROLLERDEVICEADDED;alias SDL_CONTROLLERDEVICEREMOVED = SDL_EventType.SDL_CONTROLLERDEVICEREMOVED;alias SDL_CONTROLLERDEVICEREMAPPED = SDL_EventType.SDL_CONTROLLERDEVICEREMAPPED;alias SDL_FINGERDOWN = SDL_EventType.SDL_FINGERDOWN;alias SDL_FINGERUP = SDL_EventType.SDL_FINGERUP;alias SDL_FINGERMOTION = SDL_EventType.SDL_FINGERMOTION;alias SDL_DOLLARGESTURE = SDL_EventType.SDL_DOLLARGESTURE;alias SDL_DOLLARRECORD = SDL_EventType.SDL_DOLLARRECORD;alias SDL_MULTIGESTURE = SDL_EventType.SDL_MULTIGESTURE;alias SDL_CLIPBOARDUPDATE = SDL_EventType.SDL_CLIPBOARDUPDATE;alias SDL_DROPFILE = SDL_EventType.SDL_DROPFILE;alias SDL_USEREVENT = SDL_EventType.SDL_USEREVENT;alias SDL_LASTEVENT = SDL_EventType.SDL_LASTEVENT;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlevents.d(756,1)
alias SDL_ADDEVENT = SDL_eventaction.SDL_ADDEVENT;alias SDL_PEEKEVENT = SDL_eventaction.SDL_PEEKEVENT;alias SDL_GETEVENT = SDL_eventaction.SDL_GETEVENT;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlgamecontroller.d(64,1)
alias SDL_CONTROLLER_BINDTYPE_NONE = SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_NONE;alias SDL_CONTROLLER_BINDTYPE_BUTTON = SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_BUTTON;alias SDL_CONTROLLER_BINDTYPE_AXIS = SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_AXIS;alias SDL_CONTROLLER_BINDTYPE_HAT = SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_HAT;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlgamecontroller.d(91,1)
alias SDL_CONTROLLER_AXIS_INVALID = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_INVALID;alias SDL_CONTROLLER_AXIS_LEFTX = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTX;alias SDL_CONTROLLER_AXIS_LEFTY = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTY;alias SDL_CONTROLLER_AXIS_RIGHTX = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTX;alias SDL_CONTROLLER_AXIS_RIGHTY = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTY;alias SDL_CONTROLLER_AXIS_TRIGGERLEFT = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERLEFT;alias SDL_CONTROLLER_AXIS_TRIGGERRIGHT = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERRIGHT;alias SDL_CONTROLLER_AXIS_MAX = SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_MAX;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlgamecontroller.d(141,1)
alias SDL_CONTROLLER_BUTTON_INVALID = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_INVALID;alias SDL_CONTROLLER_BUTTON_A = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_A;alias SDL_CONTROLLER_BUTTON_B = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_B;alias SDL_CONTROLLER_BUTTON_X = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_X;alias SDL_CONTROLLER_BUTTON_Y = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_Y;alias SDL_CONTROLLER_BUTTON_BACK = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_BACK;alias SDL_CONTROLLER_BUTTON_GUIDE = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_GUIDE;alias SDL_CONTROLLER_BUTTON_START = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_START;alias SDL_CONTROLLER_BUTTON_LEFTSTICK = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSTICK;alias SDL_CONTROLLER_BUTTON_RIGHTSTICK = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSTICK;alias SDL_CONTROLLER_BUTTON_LEFTSHOULDER = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSHOULDER;alias SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER;alias SDL_CONTROLLER_BUTTON_DPAD_UP = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_UP;alias SDL_CONTROLLER_BUTTON_DPAD_DOWN = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_DOWN;alias SDL_CONTROLLER_BUTTON_DPAD_LEFT = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_LEFT;alias SDL_CONTROLLER_BUTTON_DPAD_RIGHT = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_RIGHT;alias SDL_CONTROLLER_BUTTON_MAX = SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MAX;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlhints.d(205,1)
alias SDL_HINT_DEFAULT = SDL_HintPriority.SDL_HINT_DEFAULT;alias SDL_HINT_NORMAL = SDL_HintPriority.SDL_HINT_NORMAL;alias SDL_HINT_OVERRIDE = SDL_HintPriority.SDL_HINT_OVERRIDE;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdllog.d(38,1)
alias SDL_LOG_CATEGORY_APPLICATION = SDL_LogCategory.SDL_LOG_CATEGORY_APPLICATION;alias SDL_LOG_CATEGORY_ERROR = SDL_LogCategory.SDL_LOG_CATEGORY_ERROR;alias SDL_LOG_CATEGORY_ASSERT = SDL_LogCategory.SDL_LOG_CATEGORY_ASSERT;alias SDL_LOG_CATEGORY_SYSTEM = SDL_LogCategory.SDL_LOG_CATEGORY_SYSTEM;alias SDL_LOG_CATEGORY_AUDIO = SDL_LogCategory.SDL_LOG_CATEGORY_AUDIO;alias SDL_LOG_CATEGORY_VIDEO = SDL_LogCategory.SDL_LOG_CATEGORY_VIDEO;alias SDL_LOG_CATEGORY_RENDER = SDL_LogCategory.SDL_LOG_CATEGORY_RENDER;alias SDL_LOG_CATEGORY_INPUT = SDL_LogCategory.SDL_LOG_CATEGORY_INPUT;alias SDL_LOG_CATEGORY_TEST = SDL_LogCategory.SDL_LOG_CATEGORY_TEST;alias SDL_LOG_CATEGORY_RESERVED1 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED1;alias SDL_LOG_CATEGORY_RESERVED2 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED2;alias SDL_LOG_CATEGORY_RESERVED3 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED3;alias SDL_LOG_CATEGORY_RESERVED4 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED4;alias SDL_LOG_CATEGORY_RESERVED5 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED5;alias SDL_LOG_CATEGORY_RESERVED6 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED6;alias SDL_LOG_CATEGORY_RESERVED7 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED7;alias SDL_LOG_CATEGORY_RESERVED8 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED8;alias SDL_LOG_CATEGORY_RESERVED9 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED9;alias SDL_LOG_CATEGORY_RESERVED10 = SDL_LogCategory.SDL_LOG_CATEGORY_RESERVED10;alias SDL_LOG_CATEGORY_CUSTOM = SDL_LogCategory.SDL_LOG_CATEGORY_CUSTOM;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdllog.d(49,1)
alias SDL_LOG_PRIORITY_VERBOSE = SDL_LogPriority.SDL_LOG_PRIORITY_VERBOSE;alias SDL_LOG_PRIORITY_DEBUG = SDL_LogPriority.SDL_LOG_PRIORITY_DEBUG;alias SDL_LOG_PRIORITY_INFO = SDL_LogPriority.SDL_LOG_PRIORITY_INFO;alias SDL_LOG_PRIORITY_WARN = SDL_LogPriority.SDL_LOG_PRIORITY_WARN;alias SDL_LOG_PRIORITY_ERROR = SDL_LogPriority.SDL_LOG_PRIORITY_ERROR;alias SDL_LOG_PRIORITY_CRITICAL = SDL_LogPriority.SDL_LOG_PRIORITY_CRITICAL;alias SDL_NUM_LOG_PRIORITIES = SDL_LogPriority.SDL_NUM_LOG_PRIORITIES;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlmessagebox.d(26,1)
alias SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = SDL_MessageBoxButtonFlags.SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT;alias SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = SDL_MessageBoxButtonFlags.SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlmessagebox.d(46,1)
alias SDL_MESSAGEBOX_COLOR_BACKGROUND = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BACKGROUND;alias SDL_MESSAGEBOX_COLOR_TEXT = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_TEXT;alias SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_BORDER;alias SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND;alias SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED;alias SDL_MESSAGEBOX_COLOR_MAX = SDL_MessageBoxColorType.SDL_MESSAGEBOX_COLOR_MAX;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlmouse.d(31,1)
alias SDL_SYSTEM_CURSOR_ARROW = SDL_SystemCursor.SDL_SYSTEM_CURSOR_ARROW;alias SDL_SYSTEM_CURSOR_IBEAM = SDL_SystemCursor.SDL_SYSTEM_CURSOR_IBEAM;alias SDL_SYSTEM_CURSOR_WAIT = SDL_SystemCursor.SDL_SYSTEM_CURSOR_WAIT;alias SDL_SYSTEM_CURSOR_CROSSHAIR = SDL_SystemCursor.SDL_SYSTEM_CURSOR_CROSSHAIR;alias SDL_SYSTEM_CURSOR_WAITARROW = SDL_SystemCursor.SDL_SYSTEM_CURSOR_WAITARROW;alias SDL_SYSTEM_CURSOR_SIZENWSE = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENWSE;alias SDL_SYSTEM_CURSOR_SIZENESW = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENESW;alias SDL_SYSTEM_CURSOR_SIZEWE = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZEWE;alias SDL_SYSTEM_CURSOR_SIZENS = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZENS;alias SDL_SYSTEM_CURSOR_SIZEALL = SDL_SystemCursor.SDL_SYSTEM_CURSOR_SIZEALL;alias SDL_SYSTEM_CURSOR_NO = SDL_SystemCursor.SDL_SYSTEM_CURSOR_NO;alias SDL_SYSTEM_CURSOR_HAND = SDL_SystemCursor.SDL_SYSTEM_CURSOR_HAND;alias SDL_NUM_SYSTEM_CURSORS = SDL_SystemCursor.SDL_NUM_SYSTEM_CURSORS;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlpower.d(18,1)
alias SDL_POWERSTATE_UNKNOWN = SDL_PowerState.SDL_POWERSTATE_UNKNOWN;alias SDL_POWERSTATE_ON_BATTERY = SDL_PowerState.SDL_POWERSTATE_ON_BATTERY;alias SDL_POWERSTATE_NO_BATTERY = SDL_PowerState.SDL_POWERSTATE_NO_BATTERY;alias SDL_POWERSTATE_CHARGING = SDL_PowerState.SDL_POWERSTATE_CHARGING;alias SDL_POWERSTATE_CHARGED = SDL_PowerState.SDL_POWERSTATE_CHARGED;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlrender.d(56,1)
alias SDL_TEXTUREACCESS_STATIC = SDL_TextureAccess.SDL_TEXTUREACCESS_STATIC;alias SDL_TEXTUREACCESS_STREAMING = SDL_TextureAccess.SDL_TEXTUREACCESS_STREAMING;alias SDL_TEXTUREACCESS_TARGET = SDL_TextureAccess.SDL_TEXTUREACCESS_TARGET;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlrender.d(63,1)
alias SDL_TEXTUREMODULATE_NONE = SDL_TextureModulate.SDL_TEXTUREMODULATE_NONE;alias SDL_TEXTUREMODULATE_COLOR = SDL_TextureModulate.SDL_TEXTUREMODULATE_COLOR;alias SDL_TEXTUREMODULATE_ALPHA = SDL_TextureModulate.SDL_TEXTUREMODULATE_ALPHA;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlrender.d(70,1)
alias SDL_FLIP_NONE = SDL_RendererFlip.SDL_FLIP_NONE;alias SDL_FLIP_HORIZONTAL = SDL_RendererFlip.SDL_FLIP_HORIZONTAL;alias SDL_FLIP_VERTICAL = SDL_RendererFlip.SDL_FLIP_VERTICAL;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlshape.d(27,1)
alias ShapeModeDefault = WindowShapeMode.ShapeModeDefault;alias ShapeModeBinarizeAlpha = WindowShapeMode.ShapeModeBinarizeAlpha;alias ShapeModeReverseBinarizeAlpha = WindowShapeMode.ShapeModeReverseBinarizeAlpha;alias ShapeModeColorKey = WindowShapeMode.ShapeModeColorKey;

// expansion at ../../.dub/packages/bindbc-sdl/1.2.4/bindbc-sdl/source/bindbc/sdl/bind/sdlthread.d(31,1)
alias SDL_THREAD_PRIORITY_LOW = SDL_ThreadPriority.SDL_THREAD_PRIORITY_LOW;alias SDL_THREAD_PRIORITY_NORMAL = SDL_ThreadPriority.SDL_THREAD_PRIORITY_NORMAL;alias SDL_THREAD_PRIORITY_HIGH = SDL_ThreadPriority.SDL_THREAD_PRIORITY_HIGH;

// expansion at /usr/include/dmd/phobos/std/functional.d(452,16)
cast(T)a < cast(T) b

// expansion at /usr/include/dmd/phobos/std/format/spec.d(170,13)
private ubyte _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf;@property bool flDash() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 1U) != 0;}
@property void flDash(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 1U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))1U);}
@property bool flZero() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 2U) != 0;}
@property void flZero(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 2U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))2U);}
@property bool flSpace() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 4U) != 0;}
@property void flSpace(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 4U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))4U);}
@property bool flPlus() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 8U) != 0;}
@property void flPlus(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 8U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))8U);}
@property bool flHash() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 16U) != 0;}
@property void flHash(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 16U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))16U);}
@property bool flEqual() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 32U) != 0;}
@property void flEqual(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 32U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))32U);}
@property bool flSeparator() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 64U) != 0;}
@property void flSeparator(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 64U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))64U);}

// expansion at /usr/include/dmd/phobos/std/functional.d(452,16)
cast(T)a < cast(T) b

// expansion at /usr/include/dmd/phobos/std/functional.d(222,13)
alias a = __a ;

// expansion at /usr/include/dmd/phobos/std/functional.d(223,13)
alias b = __b ;

// expansion at /usr/include/dmd/phobos/std/functional.d(224,20)
a == b

// expansion at /usr/include/dmd/phobos/std/typecons.d(467,13)
enum int data = 0;

// expansion at /usr/include/dmd/phobos/std/typecons.d(467,13)
enum int count = 0;

// expansion at /usr/include/dmd/phobos/std/typecons.d(654,9)
alias _0LU = Identity!(field[0LU]);alias data = _0LU;alias _1LU = Identity!(field[1LU]);alias count = _1LU;

// expansion at /usr/include/dmd/phobos/std/typecons.d(654,9)
alias _0LU = Identity!(field[0LU]);alias _1LU = Identity!(field[1LU]);

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs < rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs < rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs == rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs < rhs

// expansion at /usr/include/dmd/phobos/std/typecons.d(539,31)
lhs < rhs

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at /usr/include/dmd/phobos/std/functional.d(222,13)
alias a = __a ;

// expansion at /usr/include/dmd/phobos/std/functional.d(223,13)
alias b = __b ;

// expansion at /usr/include/dmd/phobos/std/functional.d(224,20)
a == b

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

